# - *- coding: utf- 8 - *-
import asyncio
import json

import requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from pyqiwip2p import QiwiP2P

from admin_panel.filters import IsAdmin
from keyboards.default import payment_default
from keyboards.inline import choice_way_input_payment_func
from loader import dp, bot
from states import StorageQiwi
from utils import send_all_admin, clear_firstname
from utils.db_api.sqlite import get_paymentx, update_paymentx


###################################################################################
########################### –í–ö–õ–Æ–ß–ï–ù–ò–ï/–í–´–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û–ü–û–õ–ù–ï–ù–ò–Ø #######################
# –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", state="*")
async def turn_off_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(status="False")
    await message.answer("<b>üî¥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", state="*")
async def turn_on_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(status="True")
    await message.answer("<b>üü¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)

@dp.message_handler(IsAdmin(), text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å apirone", state="*")
async def turn_off_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(apirone_status="False")
    await message.answer("<b>üî¥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è apirone –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è apirone –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üü¢ –í–∫–ª—é—á–∏—Ç—å apirone", state="*")
async def turn_on_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(apirone_status="True")
    await message.answer("<b>üü¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è apirone –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è apirone –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)
@dp.message_handler(IsAdmin(), text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–∞–Ω–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä", state="*")
async def turn_off_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(karta_status="False")
    await message.answer("<b>üî¥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üü¢ –í–∫–ª—é—á–∏—Ç—å –±–∞–Ω–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä", state="*")
async def turn_on_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(karta_status="True")
    await message.answer("<b>üü¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –±–æ—Ç–µ.", not_me=message. from_user.id)
###################################################################################
############################# –í–´–ë–û–† –°–ü–û–°–û–ë–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø ############################
# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="change_payment:")
async def input_amount(call: CallbackQuery):
    way_pay = call.data[15:]
    change_pass = False
    get_payment = get_paymentx()
    if way_pay == "nickname":
        try:
            request = requests.Session()
            request.headers["authorization"] = "Bearer " + get_payment[1]
            get_nickname = request.get(f"https://edge.qiwi.com/qw-nicknames/v1/persons/{get_payment[0]}/nickname")
            check_nickname = json.loads(get_nickname.text).get("nickname")
            if check_nickname is None:
                await call.answer("‚ùó –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç QIWI –ù–∏–∫–Ω–µ–π–º")
            else:
                update_paymentx(qiwi_nickname=check_nickname)
                change_pass = True
        except json.decoder.JSONDecodeError:
            await call.answer("‚ùó QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ", True)
    else:
        change_pass = True
    if change_pass:
        update_paymentx(way_payment=way_pay)


###################################################################################
####################################### QIWI ######################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ QIWI –∫–æ—à–µ–ª—å–∫–∞
@dp.message_handler(IsAdmin(), text="ü§ç –ò–∑–º–µ–Ω–∏—Ç—å PayPal üñç", state="*")
async def change_qiwi_login(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>ü§ç –í–≤–µ–¥–∏—Ç–µ</b> <code>Client ID</code> <b>PayPal –∫–æ—à–µ–ª—å–∫–∞üñç </b>")
    await StorageQiwi.here_input_qiwi_login.set()
@dp.message_handler(IsAdmin(), text="üîµ –ò–∑–º–µ–Ω–∏—Ç—å apirone üñç", state="*")
async def change_qiwi_login(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üîµ –í–≤–µ–¥–∏—Ç–µ</b> <code>Account ID</code> <b>APIRONE –∫–æ—à–µ–ª—å–∫–∞üñç </b>")
    await StorageQiwi.here_input_apirone_login.set()
@dp.message_handler(IsAdmin(), text="üîµ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä üñç", state="*")
async def change_qiwi_login(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üîµ –í–≤–µ–¥–∏—Ç–µ <code>–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç</code></b>")
    await StorageQiwi.here_input_karta_login.set()
# –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –∫–∏–≤–∏
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_login)
async def change_key_api(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_input_qiwi_login"] = message.text
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ</b> <code>Secret ID</code> <b>QIWI –∫–æ—à–µ–ª—å–∫–∞ üñç</b>\n",
                         disable_web_page_preview=True)
    await StorageQiwi.here_input_qiwi_token.set()
# APIRONEEDIT
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_apirone_login)
async def change_key_api(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_input_apirone_login"] = message.text
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ</b> <code>Transfer Key</code> <b>APIRONE –∫–æ—à–µ–ª—å–∫–∞ üñç</b>\n",
                         disable_web_page_preview=True)
    await StorageQiwi.here_input_apirone_token.set()

# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–∏–≤–∏
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_token)
async def change_secret_api(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_input_qiwi_token"] = message.text
    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ</b> <code>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á üñç</code>\n",
                         disable_web_page_preview=True)
    await StorageQiwi.here_input_qiwi_secret.set()
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_karta_login)
async def change_secret_api(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_input_karta_login"] = message.text
    await message.answer("‚úÖ —Ç–µ–∫—Å—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω\n",
                         disable_web_page_preview=True)
    update_paymentx(karta=message.text)
    await state.finish()
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–∏–≤–∏
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_apirone_token)
async def change_secret_api(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        qiwi_login = data["here_input_apirone_login"]
        qiwi_token = message.text
    qiwi_private_key = message.text
    update_paymentx(apirone_key=qiwi_login, apirone_transfer=qiwi_token)
    await message.answer("<b>APIRONE —Ç–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ</b>",
                            reply_markup=payment_default())
    await state.finish()
# –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∫–∏–≤–∏
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_secret)
async def change_secret_api(message: types.Message, state: FSMContext):
    secrey_key_error = False
    async with state.proxy() as data:
        qiwi_login = data["here_input_qiwi_login"]
        qiwi_token = data["here_input_qiwi_token"]
    qiwi_private_key = message.text
    update_paymentx(qiwi_login=qiwi_login, qiwi_token=qiwi_token,
                    qiwi_private_key=qiwi_private_key)
    await message.answer("<b>PayPal —Ç–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ</b>",
                            reply_markup=payment_default())
    await state.finish()

@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_apirone_secret)
async def change_secret_api(message: types.Message, state: FSMContext):
    secrey_key_error = False
    async with state.proxy() as data:
        qiwi_login = data["here_input_apirone_login"]
        qiwi_token = data["here_input_apirone_token"]
    qiwi_private_key = message.text
    update_paymentx(apirone_key=qiwi_login, apirone_transfer=qiwi_token)
    await message.answer("<b>APIRONE —Ç–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ</b>",
                            reply_markup=payment_default())
    await state.finish()
